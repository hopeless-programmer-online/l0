f() {
    print("lol")
}

for_range(begin, end, callback) {
    i : var(begin)

    iterate() {
        is : >=(i, end)
        if (is, /super)

        callback(i)

        i1 : +(i, 1)
        =(i, i1)

        iterate()
    }

    iterate()
}

for_each(list, callback) {
    i : var(0)
    l : length(list)

    iterate() {
        is : >=(i, l)
        if (is, /super)

        x : get(list, i)

        callback(x, i)

        i1 : +(i, 1)
        =(i, i1)

        iterate()
    }

    iterate()
}

in(x, list) {
    then() {
        /super(true)
    }
    callback(y) {
        is : ==(x, y)
        if (is, then)
    }

    for_each(list, callback)

    super(false)
}

filter(list, rule) {
    result : List()

    callback(x, i) {
        then() {
            push_back(result, x)
        }
        is : rule(x, i)
        if (is, then)
    }

    for_each(list, callback)

    super(result)
}

map(list, replace) {
    result : List()

    callback(x, i) {
        x : replace(x, i)

        push_back(result, x)
    }

    for_each(list, callback)

    super(result)
}

index_of(list, value) {
    callback(x, i) {
        then() {
            //super(i)
        }
        is : ==(value, x)
        if (is, then)
    }

    for_each(list, callback)

    super(false)
}

push_back_unique(list, x) {
    is : in(x, list)
    if (is, super)

    push_back(list, x)
}

push_front_unique(list, x) {
    is : in(x, list)
    if (is, super)

    push_front(list, x)
}

copy_list(list) {
    copy : List()

    callback(x) {
        push_back(copy, x)
    }

    for_each(list, callback)

    super(copy)
}

optimize(program) {
    process_internal() {
        print("process internal")

        restore_buffer() {
            closure : get_closure(program) ; print(closure)
            closure_length : length(closure)
            buffer : List()

            push_back(buffer, f)

            buffer : +(buffer, closure)

            super(buffer, closure_length)
        }
        restore_targets() {
            template : get_template(program) ; print(template)
            targets : get_targets(template) ; print(targets)

            super(targets)
        }

        buffer, closure_length : restore_buffer()
        buffer_length : length(buffer) ; print("buffer length: ", buffer_length)
        targets : restore_targets()
        targets_length : length(targets) ; print("targets length: ", targets_length)

        get_param(index) {
            index : get(targets, index)
            param : get(buffer, index)

            super(param, index)
        }

        target : get_param(0)

        process_bind() {
            print("process bind")

            storage_length : -(targets_length, 3)
            bind_index : get(targets, 0)
            continuation_template, continuation_template_index : get_param(1)
            continuation_targets : get_targets(continuation_template) ; print(continuation_targets)
            declaration_template, declaration_template_index : get_param(2)
            declaration_targets : get_targets(declaration_template) ; print(declaration_targets)

            gather_used_params_indices_from_buffer() {
                used : List()

                gather_used_index(x) {
                    ; skip values not stored in buffer
                    then() {
                        print(x, " out of bounds")
                        /super()
                    }
                    is_current : <(x, 1)
                    is_outside : >(x, storage_length)
                    is : or(is_outside, is_current)
                    if (is, then)

                    ; restore index in buffer before bind call
                    x : +(x, 2)
                    x : get(targets, x)

                    push_back_unique(used, x)
                }

                for_each(continuation_targets, gather_used_index)
                for_each(declaration_targets, gather_used_index)

                super(used)
            }

            used_params_indices : gather_used_params_indices_from_buffer()

            print("used params indices: ", used_params_indices)

            gather_used_buffer_indices() {
                used_buffer_indices : copy_list(used_params_indices)

                push_front_unique(used_buffer_indices, declaration_template_index)
                push_front_unique(used_buffer_indices, continuation_template_index)
                push_front_unique(used_buffer_indices, bind_index)

                super(used_buffer_indices)
            }

            used_buffer_indices : gather_used_buffer_indices()

            print("used buffer indices: ", used_buffer_indices)

            ; @todo: replace continuation & declaration templates
            compile_reduced_closure() {
                callback(x) {
                    x : get(buffer, x)

                    super(x)
                }

                reduced_closure : map(used_buffer_indices, callback)

                super(reduced_closure)
            }

            reduced_closure : compile_reduced_closure()

            print("reduced closure: ", reduced_closure)

            compile_reduced_template() {
                reduced_targets : List()

                reduced_bind_index : index_of(used_buffer_indices, bind_index) ; print("reduced bind index", reduced_bind_index)
                reduced_bind_index : +(reduced_bind_index, 1)
                reduced_continuation_template_index : index_of(used_buffer_indices, continuation_template_index) ; print("reduced continuation template index", reduced_continuation_template_index)
                reduced_continuation_template_index : +(reduced_continuation_template_index, 1)
                reduced_declaration_template_index : index_of(used_buffer_indices, declaration_template_index) ; print("reduced declaration template index", reduced_declaration_template_index)
                reduced_declaration_template_index : +(reduced_declaration_template_index, 1)

                push_back(reduced_targets, reduced_bind_index)
                push_back(reduced_targets, reduced_continuation_template_index)
                push_back(reduced_targets, reduced_declaration_template_index)

                buffer_length : length(buffer)
                reduced_closure_length : length(reduced_closure)
                differece : -(buffer_length, reduced_closure_length)
                differece : -(differece, 1)

                callback(x) {
                    ; adjust indices outside closure range
                    then() {
                        x : -(x, differece)

                        super(x)
                    }
                    is : >=(x, buffer_length)
                    if (is, then)

                    ; return 0 for current instruction
                    then() {
                        super(x)
                    }
                    is : ==(x, 0)
                    if (is, then)

                    ; lookup for reduced closure
                    x : index_of(used_buffer_indices, x)

                    super(x)
                }

                targets : map(used_params_indices, callback)

                callback(x) {
                    push_back(reduced_targets, x)
                }

                for_each(targets, callback)

                print("reduced targets: ", reduced_targets)

                template : Template(reduced_targets)

                super(template)
            }

            reduced_template : compile_reduced_template()

            print(reduced_template)

            //super()
        }

        is : ==(target, bind) if (is, process_bind)

        print("failed to process call target ", target)

        /super()
    }

    program_type : type(program)
    is : ==(program_type, Internal) if (is, process_internal)

    print("failed to process program ", program)

    /super()
}

optimize(f)
